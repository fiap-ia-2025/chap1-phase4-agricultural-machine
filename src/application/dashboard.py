import streamlit as st  # Cria a interface web interativa com Streamlit
import pandas as pd  # Manipula e carrega dados em tabelas (DataFrames)
import matplotlib.pyplot as plt  # Cria e personaliza gr√°ficos com controle total (base de visualiza√ß√£o)
import seaborn as sns  # Gera gr√°ficos estat√≠sticos com visual bonito e menos c√≥digo
import sqlite3

# Conex√£o com Base de dados
conn = sqlite3.connect("farm_data.db")
df = pd.read_sql_query("SELECT * FROM leitura_sensor", conn)
pd.set_option('display.max_columns', None)   # mostra todas as colunas
pd.set_option('display.max_rows', None)      # mostra todas as linhas
pd.set_option('display.width', None)         # evita quebra de linha
pd.set_option('display.max_colwidth', None)
print(df)
conn.close()

# Estrutura do cabe√ßalho e layout da p√°gina
st.set_page_config(page_title="Sistema de Irriga√ß√£o Inteligente", layout="wide")
st.title("üåø Dashboard - Sistema de Irriga√ß√£o Inteligente")
st.markdown(
    "Este painel apresenta a leitura dos sensores do solo e o comportamento do sistema de irriga√ß√£o autom√°tico.")

# Cria se√ß√£o com an√°lise de Umidade e pH lado a lado
col1, col2 = st.columns(2)

# ---- An√°lise 1 (Umidade do Solo + Acionamento): Avaliar se o sistema est√° acionando a bomba no momento certo ----
with col1:
    # Subt√≠tulo e explica√ß√£o da se√ß√£o
    st.subheader("üìà Umidade do Solo e Acionamento da Bomba")
    st.info("""
    Este gr√°fico mostra a varia√ß√£o da umidade do solo com marca√ß√µes dos momentos de irriga√ß√£o.

    **Voc√™ pode avaliar:**
    - Quando a bomba foi acionada
    - Se a irriga√ß√£o foi eficiente (Aumento de Umidade)
    - Se a l√≥gica de ativa√ß√£o est√° funcionando corretamente
    """)

    # Cria√ß√£o do gr√°fico com Matplotlib
    fig1, ax1 = plt.subplots(figsize=(6, 4))

    # Plota a linha da umidade
    sns.lineplot(data=df, x="timestamp", y="umidade", label="umidade", ax=ax1)

    # Destaca os pontos em que a bomba foi ligada (em vermelho)
    bomba_ligada = df[df["status_bomba"] == 1]
    ax1.scatter(bomba_ligada["timestamp"], bomba_ligada["umidade"], color="red", label="Bomba Ligada")

    # Personaliza√ß√£o visual
    ax1.set_title("Umidade do Solo ao Longo do Tempo", fontsize=12)
    ax1.set_ylabel("Umidade (%)")
    ax1.set_xlabel("Tempo (s)")
    plt.xticks(rotation=45)
    plt.legend()

    # Renderiza no Streamlit
    st.pyplot(fig1)

# ---- An√°lise 2 (Varia√ß√£o de pH): Analisar o comportamento no pH no solo ao longo do tempo ----
with col2:
    # Subt√≠tulo e explica√ß√£o da se√ß√£o de pH
    st.subheader("üß™ Varia√ß√£o do pH do Solo")
    st.info("""
    Este gr√°fico mostra como o pH do solo est√° variando ao longo do tempo.  

    **Voc√™ pode avaliar:**
    - Se o pH est√° na faixa ideal (para a maioria das culturas est√° entre **6.0 e 7.5**).
    - Se h√° varia√ß√µes bruscas no solo (ex: chuva √°cida, excesso de fertilizantes)
    - Se o solo tende a ser mais √°cido ou alcalino ao longo do tempo
    """)

    # Cria√ß√£o do gr√°fico de pH
    fig_ph, ax_ph = plt.subplots(figsize=(6, 4))
    sns.lineplot(data=df, x="timestamp", y="ph", color="purple", ax=ax_ph)

    # Faixa ideal de pH (visual guide)
    ax_ph.axhspan(6.0, 7.5, facecolor='green', alpha=0.1, label="Faixa Ideal (6.0 - 7.5)")

    # Personaliza√ß√£o
    ax_ph.set_title("pH do Solo ao Longo do Tempo", fontsize=12)
    ax_ph.set_ylabel("pH")
    ax_ph.set_ylim(0, 14)
    ax_ph.legend()
    plt.xticks(rotation=45)

    # Exibe no Streamlit
    st.pyplot(fig_ph)

# ---- An√°lise 3 (Nutrientes em solo): Identificar frequ√™ncia e padr√£o de aus√™ncia de nutrientes no solo ao longo do tempo (P e K) ----
# Subt√≠tulo e explica√ß√£o da se√ß√£o de nutrientes
st.subheader("üß™ Nutrientes no Solo")
st.info("""
üå± Este gr√°fico mostra a presen√ßa ou aus√™ncia dos nutrientes **F√≥sforo (P)** e **Pot√°ssio (K)** ao longo do tempo.

Voc√™ pode avaliar:
- A frequ√™ncia com que os nutrientes est√£o ausentes
- Se h√° um padr√£o de esgotamento do solo
- Quando aplicar aduba√ß√£o corretiva
""")

# Cria colunas lado a lado
col3, col4 = st.columns(2)

# F√ìSFORO (P)
with col3:
    # Explica Se√ß√£o
    st.markdown("### üîπ F√≥sforo (P)")
    st.markdown("_Presen√ßa = 1 ¬∑ Aus√™ncia = 0_")

    # Plota Gr√°fico e Ajusta Visual
    fig_p, ax_p = plt.subplots(figsize=(6, 3))
    sns.barplot(data=df, x="timestamp", y="fosforo", color="skyblue", ax=ax_p)
    ax_p.set_title("F√≥sforo (P)")
    ax_p.set_yticks([0, 1])
    ax_p.set_yticklabels(["Ausente", "Presente"])
    ax_p.set_ylabel("Presen√ßa")
    ax_p.set_xlabel("Tempo (s)")
    plt.xticks(rotation=45)
    plt.ylim(0, 1.2)
    st.pyplot(fig_p)

# POT√ÅSSIO (K)
with col4:
    # Explica Se√ß√£o
    st.markdown("### üü¢ Pot√°ssio (K)")
    st.markdown("_Presen√ßa = 1 ¬∑ Aus√™ncia = 0_")

    # Plota Gr√°fico e Ajusta Visual
    fig_k, ax_k = plt.subplots(figsize=(6, 3))
    sns.barplot(data=df, x="timestamp", y="potassio", color="seagreen", ax=ax_k)
    ax_k.set_title("Pot√°ssio (K)")
    ax_k.set_yticks([0, 1])
    ax_k.set_yticklabels(["Ausente", "Presente"])
    ax_k.set_ylabel("Presen√ßa")
    ax_p.set_xlabel("Tempo (s)")
    plt.xticks(rotation=45)
    plt.ylim(0, 1.2)
    st.pyplot(fig_k)

